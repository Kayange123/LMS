// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Course {
  id String @id @default(uuid()) @map("_id")
  userId String
  title String @db.String
  description String? @db.String
  imageUrl String? @db.String
  price Float?
  isPublished Boolean @default(false)
  categoryId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  category Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  purchases Purchase[]
  chapters Chapter[]
  attachments Attachment[]

  @@fulltext([title])
}

model Attachment {
  id String @id @default(uuid()) @map("_id")
  name String 
  url String
  courseId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Category {
  id String @id @default(uuid()) @map("_id")
  name String @unique


  courses Course[]
}

model Chapter {
  id String @id @default(uuid()) @map("_id")
  title String
  description String? @db.String
  videoUrl String? @db.String
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId String

  muxData MuxData?
  userProgress UserProgress[]

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

}

model MuxData {
   id String @id @default(uuid()) @map("_id")
   chapterId String @unique
   assetId String
   playbackId String?

   chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
   id String @id @default(uuid()) @map("_id")
   userId String
   chapterId String
   isCompleted Boolean @default(false)
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

   @@unique([userId, chapterId])
   
}

model Purchase {
   id String @id @default(uuid()) @map("_id")
   userId String
   courseId String

   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
}

model StripeCustomer {
   id String @id @default(uuid()) @map("_id")
   userId String @unique
   stripeCustomerId String @unique
  createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
}